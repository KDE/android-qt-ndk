diff --git a/binutils-2.19/bfd/elf32-arm.c b/binutils-2.19/bfd/elf32-arm.c
index 97ddcca..7de8c56 100644
--- a/binutils-2.19/bfd/elf32-arm.c
+++ b/binutils-2.19/bfd/elf32-arm.c
@@ -9340,6 +9340,19 @@ elf32_arm_merge_eabi_attributes (bfd *ibfd, bfd *obfd)
 	      return FALSE;
 	    }
 	  break;
+	case Tag_DIV_use:
+	  /* In later binutils this tag is set to zero if we can use UDIV and SDIV in Thumb
+	     mode on a v7-M or v7-R CPU; to one if we can not use UDIV or
+	     SDIV at all; and to two if we can use UDIV or SDIV on a v7-A
+	     CPU.  We will merge as follows: If the input attribute's value
+	     is one then the output attribute's value remains unchanged.  If
+	     the input attribute's value is zero or two then if the output
+	     attribute's value is one the output value is set to the input
+	     value, otherwise the output value must be the same as the
+	     inputs.
+	     In this binutils we don't generate in assembler nor propagate this tag */
+
+	  break;
 	default: /* All known attributes should be explicitly covered.   */
 	  abort ();
 	}
@@ -9372,7 +9385,7 @@ elf32_arm_merge_eabi_attributes (bfd *ibfd, bfd *obfd)
 
   for (; in_list; in_list = in_list->next)
     {
-      if ((in_list->tag & 128) < 64)
+      if ((in_list->tag & 128) < 64 && in_list->tag != Tag_DIV_use)
 	{
 	  _bfd_error_handler
 	    (_("Warning: %B: Unknown EABI object attribute %d"),
diff --git a/binutils-2.19/binutils/readelf.c b/binutils-2.19/binutils/readelf.c
index 2d356a6..24a9839 100644
--- a/binutils-2.19/binutils/readelf.c
+++ b/binutils-2.19/binutils/readelf.c
@@ -8796,6 +8796,9 @@ static const char *arm_attr_tag_ABI_optimization_goals[] =
 static const char *arm_attr_tag_ABI_FP_optimization_goals[] =
   {"None", "Prefer Speed", "Aggressive Speed", "Prefer Size",
     "Aggressive Size", "Prefer Accuracy", "Aggressive Accuracy"};
+static const char * arm_attr_tag_DIV_use[] =
+  {"Allowed in Thumb-ISA, v7-R or v7-M", "Not allowed",
+    "Allowed in v7-A with integer division extension"};
 
 #define LOOKUP(id, name) \
   {id, #name, 0x80 | ARRAY_SIZE(arm_attr_tag_##name), arm_attr_tag_##name}
@@ -8829,7 +8832,8 @@ static arm_attr_public_tag arm_attr_public_tags[] =
   LOOKUP(29, ABI_WMMX_args),
   LOOKUP(30, ABI_optimization_goals),
   LOOKUP(31, ABI_FP_optimization_goals),
-  {32, "compatibility", 0, NULL}
+  {32, "compatibility", 0, NULL},
+  LOOKUP(44, DIV_use)
 };
 #undef LOOKUP
 
diff --git a/binutils-2.19/elfcpp/arm.h b/binutils-2.19/elfcpp/arm.h
index 397d0d0..4a8f56c 100644
--- a/binutils-2.19/elfcpp/arm.h
+++ b/binutils-2.19/elfcpp/arm.h
@@ -285,6 +285,7 @@ enum
   Tag_undefined37 = 37,
   Tag_ABI_FP_16bit_format = 38,
   Tag_undefined39 = 39,
+  Tag_DIV_use = 44,
   Tag_nodefaults = 64,
   Tag_also_compatible_with = 65,
   Tag_T2EE_use = 66,
diff --git a/binutils-2.19/gold/arm.cc b/binutils-2.19/gold/arm.cc
index 9edfa90..001a5b3 100644
--- a/binutils-2.19/gold/arm.cc
+++ b/binutils-2.19/gold/arm.cc
@@ -10342,6 +10342,19 @@ Target_arm<big_endian>::merge_object_attributes(
 	    out_attr[i].set_int_value(in_attr[i].int_value());
 	  break;
 
+	case elfcpp::Tag_DIV_use:
+	  // In later binutils this tag is set to zero if we can use UDIV and SDIV in Thumb
+	  // mode on a v7-M or v7-R CPU; to one if we can not use UDIV or
+	  // SDIV at all; and to two if we can use UDIV or SDIV on a v7-A
+	  // CPU.  We will merge as follows: If the input attribute's value
+	  // is one then the output attribute's value remains unchanged.  If
+	  // the input attribute's value is zero or two then if the output
+	  // attribute's value is one the output value is set to the input
+	  // value, otherwise the output value must be the same as the
+	  // inputs.
+	  // In this binutils we don't generate in assembler nor propagate this tag.
+	  break;
+
 	case elfcpp::Tag_nodefaults:
 	  // This tag is set if it exists, but the value is unused (and is
 	  // typically zero).  We don't actually need to do anything here -
diff --git a/binutils-2.19/include/elf/arm.h b/binutils-2.19/include/elf/arm.h
index af623f1..1b5a69e 100644
--- a/binutils-2.19/include/elf/arm.h
+++ b/binutils-2.19/include/elf/arm.h
@@ -272,6 +272,7 @@ enum
   Tag_ABI_optimization_goals,
   Tag_ABI_FP_optimization_goals,
   /* 32 is generic.  */
+  Tag_DIV_use = 44
 };
 
 #endif
diff --git a/binutils-2.19/gas/config/tc-arm.c b/binutils-2.19/gas/config/tc-arm.c
index 7768f47..062c807 100644
--- a/binutils-2.19/gas/config/tc-arm.c
+++ b/binutils-2.19/gas/config/tc-arm.c
@@ -20855,6 +20855,7 @@ aeabi_set_public_attributes (void)
   if (ARM_CPU_HAS_FEATURE (thumb_arch_used, fpu_neon_ext_v1)
       || ARM_CPU_HAS_FEATURE (arm_arch_used, fpu_neon_ext_v1))
     bfd_elf_add_proc_attr_int (stdoutput, 12, 1);
+  /* Don't set Tag_DIV_use on purpose. */
 }
 
 /* Add the default contents for the .ARM.attributes section.  */
